name: CI / CD

on:
  push:
    tags: V* # V를 앞글자로 가지는 태그가 push 될 때 해당 workflow 실행 - ex) V2, V3

jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전

    steps:
      - name: Checkout # 소스를 가져옴
        uses: actions/checkout@v2

      - name: Set up JDK 17 # JDK 17 셋업
        uses: actions/setup-java@v1
        with:
          java-version: 17
          
      - uses: actions/checkout@v2
      - run: mkdir ./src/main/resources
      - run: touch ./src/main/resources/application.yml
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml #  github secrets에 암호화되어 저장된 APPLICATION secret파일 설정
      - uses: actions/upload-artifact@v2
        with:
          name: application.yml
          path: ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew # gradlew 사용 권한 부여
        run: chmod 777 ./gradlew
        shell: bash

      - name: Clean build test with Gradle # clean build test
        run: ./gradlew clean build test
        shell: bash
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # Build Push to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: k4g0n1m3
          REPOSITORY: redis
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t redis .
          docker tag redis:latest public.ecr.aws/k4g0n1m3/redis:latest
          docker push public.ecr.aws/k4g0n1m3/redis:latest
        
      - name: Deploy to EC2
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_CODEDEPLOY_NAME }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP }} \
            --description "My GitHub Actions deployment" \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
